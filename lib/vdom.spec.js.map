{
  "version": 3,
  "sources": ["src/vdom.spec.js"],
  "sourcesContent": ["// Copyright (c) 2020 Dirk Holtwick. All rights reserved. https://holtwick.de/copyright\n\n// import Sizzle from './sizzle'\nimport { VDocument, VDocumentFragment, h } from './vdom'\nimport { xml } from './xml.js'\nimport { parseHTML } from './vdomparser.js'\nimport { createHTMLDocument } from './vdom.js'\n\ndescribe('VDOM', () => {\n\n  it('should mimic DOM', () => {\n    let document = new VDocument()\n    document.appendChild(document.createElement('p'))\n    document.appendChild(document.createElement('p'))\n    let html = document.render()\n    expect(html).toBe('<p></p><p></p>')\n  })\n\n  it('should mimic DOM', () => {\n    let document = new VDocument()\n    let frag = new VDocumentFragment()\n    let p = document.createElement('p')\n    p.setAttribute('class', 'foo')\n    p.textContent = 'Some'\n    frag.appendChild(p)\n    let html = frag.render()\n    expect(html).toBe('<p class=\"foo\">Some</p>')\n  })\n\n  it('should have functional factory', () => {\n    let doc = createHTMLDocument()\n\n    doc.body.replaceChildren(\n      h('p', { class: 'lorem' }, 'Hello ',\n        h('b', { id: 'foo' }, 'World'),\n      ),\n      h('hr'),\n    )\n\n    let r = doc.body\n\n    expect(r.render()).toBe('<body><p class=\"lorem\">Hello <b id=\"foo\">World</b></p><hr></body>')\n\n    let elements = r.flatten().map(e => e.tagName)\n    expect(elements).toEqual(['BODY', 'P', 'B', 'HR'])\n\n    expect(r.ownerDocument).toBe(doc)\n\n    expect(r.getElementsByTagName('b')[0].outerHTML).toEqual('<b id=\"foo\">World</b>')\n    expect(r.getElementById('foo').outerHTML).toEqual('<b id=\"foo\">World</b>')\n    expect(r.getElementsByClassName('lorem')[0].outerHTML).toEqual('<p class=\"lorem\">Hello <b id=\"foo\">World</b></p>')\n\n    expect(r.matches('body')).toBe(true)\n    expect(r.matches('b')).toBe(false)\n\n    expect(r.querySelector('b').outerHTML).toEqual('<b id=\"foo\">World</b>')\n    expect(r.querySelector('#foo').outerHTML).toEqual('<b id=\"foo\">World</b>')\n    expect(r.querySelector('.lorem').outerHTML).toEqual('<p class=\"lorem\">Hello <b id=\"foo\">World</b></p>')\n\n    r.querySelector('#foo').replaceWith('Surprise')\n    expect(r.render()).toBe('<body><p class=\"lorem\">Hello Surprise</p><hr></body>')\n\n    expect(doc.body.tagName).toBe('BODY')\n    expect(doc.head.tagName).toBe('HEAD')\n    expect(doc.documentElement.tagName).toBe('HTML')\n    expect(doc.title).toBe('')\n  })\n\n  it('should use JSX', () => {\n    let spread = {\n      title: 'Hello',\n      id: 'greeting',\n    }\n    let s = <a href=\"example.com\" x=\"x\" hidden={false} onClick=\"return false\" {...spread}>\n      <hr/>\n      {null && 'This is invisible'}\n      <b>Welcome</b></a>\n    expect(s.render()).toEqual('<a href=\"example.com\" x=\"x\" onclick=\"return false\" title=\"Hello\" id=\"greeting\"><hr><b>Welcome</b></a>')\n    expect(s.render(xml)).toEqual('<a href=\"example.com\" x=\"x\" onclick=\"return false\" title=\"Hello\" id=\"greeting\"><hr /><b>Welcome</b></a>')\n  })\n\n  it('should nested JSX', () => {\n    let content = <div>Hello</div>\n    let title = 'World'\n\n    let doc = <body>\n    <h1>{title}</h1>\n    {content}\n    </body>\n\n    expect(doc.render()).toBe('<body><h1>World</h1><div>Hello</div></body>')\n  })\n\n  it('should JSX components', () => {\n    function Welcome({ props, h }) {\n      return <h1>Hello, {props.name}</h1>\n    }\n\n    let x = <Welcome name=\"Sara\"/>\n    expect(x.render()).toEqual('<h1>Hello, Sara</h1>')\n  })\n\n  it('should JSX class magic', () => {\n    let x = <div className={{\n      '-active': true,\n      'foo': 'bar',\n      'bar': '',\n      'hidden': null,\n      'name': 1,\n    }}>...</div>\n    expect(x.render()).toEqual('<div class=\"-active foo name\">...</div>')\n  })\n\n  it('should support fragments', () => {\n    let ff = <fragment>\n      <div>One</div>\n      Middle\n      <div>Two</div>\n    </fragment>\n    expect(ff).toBeInstanceOf(VDocumentFragment)\n    expect(ff.render()).toEqual('<div>One</div>Middle<div>Two</div>')\n  })\n\n  it('should remove', () => {\n    let el = <div>\n      <div id=\"a\">\n      </div>\n      <div id=\"b\">\n        Before\n        <link rel=\"stylesheet\" href=\"\"/>\n        <span>After</span>\n      </div>\n    </div>\n\n    expect(el.render()).toEqual('<div><div id=\"a\"></div><div id=\"b\">Before<link rel=\"stylesheet\" href=\"\"><span>After</span></div></div>')\n\n    let a = el.querySelector('#a')\n    el.handle('link', e => a.appendChild(e))\n\n    expect(el.render()).toEqual('<div><div id=\"a\"><link rel=\"stylesheet\" href=\"\"></div><div id=\"b\">Before<span>After</span></div></div>')\n  })\n\n  it('should handle dataSet stuff', () => {\n    let el = <div data-lang=\"en\">\n      Test\n    </div>\n\n    expect(el.attributes).toEqual({ 'data-lang': 'en' })\n    expect(el.render()).toEqual('<div data-lang=\"en\">Test</div>')\n\n    expect(el.querySelector('[data-lang]').textContent).toEqual('Test')\n\n    let frag = parseHTML(el.render())\n    expect(frag.firstChild.attributes).toEqual({ 'data-lang': 'en' })\n    expect(frag.render()).toEqual('<div data-lang=\"en\">Test</div>')\n  })\n\n  it('should insert', () => {\n    let el = <div>\n      <p>Hallo</p>\n    </div>\n\n    let w = <h1>Welcome</h1>\n    el.insertBefore(w)\n\n    expect(el.render()).toEqual('<div><h1>Welcome</h1><p>Hallo</p></div>')\n\n    el.insertBefore(w, w) // fail\n\n    el.insertBefore(<div>Subtitle</div>, el.querySelector('p'))\n\n    expect(el.render()).toEqual('<div><h1>Welcome</h1><div>Subtitle</div><p>Hallo</p></div>')\n  })\n\n\n})\n"],
  "mappings": "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",
  "names": []
}
