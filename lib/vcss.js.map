{
  "version": 3,
  "sources": ["src/vcss.js"],
  "sourcesContent": ["import { parse } from 'css-what'\n\nlet cache = {}\n\nexport function parseSelector(selector) {\n  let ast = cache[selector]\n  if (ast == null) {\n    ast = parse(selector)\n    cache[selector] = ast\n  }\n  return ast\n}\n\n// Just a very small subset for now: https://github.com/fb55/css-what#api\n\nexport function matchSelector(selector, element, { debug = false } = {}) {\n  for (let rules of parseSelector(selector)) {\n    if (debug) {\n      console.log('Selector:', selector)\n      console.log('Rules:', rules)\n      console.log('Element:', element)\n    }\n\n    function handleRules(element, rules) {\n      let success = false\n      for (let part of rules) {\n        const { type, name, action, value, ignoreCase = true, data } = part\n        if (type === 'attribute') {\n          if (action === 'equals') {\n            success = element.getAttribute(name) === value\n            if (debug) console.log('Attribute equals', success)\n          } else if (action === 'start') {\n            success = element.getAttribute(name)?.startsWith(value)\n            if (debug) console.log('Attribute start', success)\n          } else if (action === 'end') {\n            success = element.getAttribute(name)?.endsWith(value)\n            if (debug) console.log('Attribute start', success)\n          } else if (action === 'element') {\n            if (name === 'class') {\n              success = element.classList.contains(value)\n              if (debug) console.log('Attribute class', success)\n            } else {\n              success = element.getAttribute(name)?.includes(value)\n              if (debug) console.log('Attribute element', success)\n            }\n          } else if (action === 'exists') {\n            success = element.hasAttribute(name)\n            if (debug) console.log('Attribute exists', success)\n          } else {\n            console.warn('Unknown CSS selector action', action)\n          }\n        } else if (type === 'tag') {\n          success = element.tagName === name.toUpperCase()\n          if (debug) console.log('Is tag', success)\n        } else if (type === 'universal') {\n          success = true\n          if (debug) console.log('Is universal', success)\n        } else if (type === 'pseudo') {\n          if (name === 'not') {\n            let ok = true\n            data.forEach(rules => {\n              if (!handleRules(element, rules)) {\n                ok = false\n              }\n            })\n            success = !ok\n          }\n          if (debug) console.log('Is :not', success)\n          // } else if (type === 'descendant') {\n          //   element = element.\n        } else {\n          console.warn('Unknown CSS selector type', type, selector, rules)\n        }\n        // console.log(success, selector, part, element)\n        if (!success) break\n      }\n      return success\n    }\n\n    if (handleRules(element, rules)) {\n      return true\n    }\n  }\n  return false\n}\n"],
  "mappings": "AAAA;AAEA,IAAI,QAAQ;AAEL,8BAAuB;AAC5B,MAAI,MAAM,MAAM;AAChB,MAAI,OAAO;AACT,UAAM,MAAM;AACZ,UAAM,YAAY;AAAA;AAEpB,SAAO;AAAA;AAKF,8BAAuB,UAAU,SAAS,CAAE,QAAQ,SAAU;AACnE,WAAS,SAAS,cAAc;AAC9B,QAAI;AACF,cAAQ,IAAI,aAAa;AACzB,cAAQ,IAAI,UAAU;AACtB,cAAQ,IAAI,YAAY;AAAA;AAG1B,yBAAqB,UAAS;AAvBlC;AAwBM,UAAI,UAAU;AACd,eAAS,QAAQ;AACf,cAAM,CAAE,MAAM,MAAM,QAAQ,OAAO,aAAa,MAAM,QAAS;AAC/D,YAAI,SAAS;AACX,cAAI,WAAW;AACb,sBAAU,SAAQ,aAAa,UAAU;AACzC,gBAAI;AAAO,sBAAQ,IAAI,oBAAoB;AAAA,qBAClC,WAAW;AACpB,sBAAU,eAAQ,aAAa,UAArB,mBAA4B,WAAW;AACjD,gBAAI;AAAO,sBAAQ,IAAI,mBAAmB;AAAA,qBACjC,WAAW;AACpB,sBAAU,eAAQ,aAAa,UAArB,mBAA4B,SAAS;AAC/C,gBAAI;AAAO,sBAAQ,IAAI,mBAAmB;AAAA,qBACjC,WAAW;AACpB,gBAAI,SAAS;AACX,wBAAU,SAAQ,UAAU,SAAS;AACrC,kBAAI;AAAO,wBAAQ,IAAI,mBAAmB;AAAA;AAE1C,wBAAU,eAAQ,aAAa,UAArB,mBAA4B,SAAS;AAC/C,kBAAI;AAAO,wBAAQ,IAAI,qBAAqB;AAAA;AAAA,qBAErC,WAAW;AACpB,sBAAU,SAAQ,aAAa;AAC/B,gBAAI;AAAO,sBAAQ,IAAI,oBAAoB;AAAA;AAE3C,oBAAQ,KAAK,+BAA+B;AAAA;AAAA,mBAErC,SAAS;AAClB,oBAAU,SAAQ,YAAY,KAAK;AACnC,cAAI;AAAO,oBAAQ,IAAI,UAAU;AAAA,mBACxB,SAAS;AAClB,oBAAU;AACV,cAAI;AAAO,oBAAQ,IAAI,gBAAgB;AAAA,mBAC9B,SAAS;AAClB,cAAI,SAAS;AACX,gBAAI,KAAK;AACT,iBAAK,QAAQ;AACX,kBAAI,CAAC,YAAY,UAAS;AACxB,qBAAK;AAAA;AAAA;AAGT,sBAAU,CAAC;AAAA;AAEb,cAAI;AAAO,oBAAQ,IAAI,WAAW;AAAA;AAIlC,kBAAQ,KAAK,6BAA6B,MAAM,UAAU;AAAA;AAG5D,YAAI,CAAC;AAAS;AAAA;AAEhB,aAAO;AAAA;AAGT,QAAI,YAAY,SAAS;AACvB,aAAO;AAAA;AAAA;AAGX,SAAO;AAAA;",
  "names": []
}
